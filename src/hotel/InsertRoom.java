/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotel;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mahdi
 */
public class InsertRoom extends javax.swing.JDialog {

    private Connection con;
    private DefaultComboBoxModel branchModel=new DefaultComboBoxModel();
    private DefaultComboBoxModel floorModel;
    private DefaultComboBoxModel typeModel=new DefaultComboBoxModel();;

    /**
     * Creates new form insertBranch
     */
    public InsertRoom(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        try {
            initComponents();
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            this.con=DriverManager.getConnection(Hotel.getUrl());
            Statement stat=con.createStatement();
            ResultSet set=stat.executeQuery("SELECT branch_ID FROM branch ");
            branchModel.addElement("SELECT");
            while(set.next()){
                branchModel.addElement(set.getInt(1));
            }
            set=stat.executeQuery("SELECT type FROM price WHERE type!='Entry'");
            typeModel.addElement("SELECT");
            while(set.next()){
                typeModel.addElement(set.getString(1));
            }
            this.typeComboBox.setModel(typeModel);
            this.con.close();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this,"Missing SQLServerDriver!","",JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Connection Error!","",JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        roomPanel = new javax.swing.JPanel();
        idLabel = new javax.swing.JLabel();
        branchLabel = new javax.swing.JLabel();
        branchComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        floorComboBox = new javax.swing.JComboBox<>();
        typeLabel = new javax.swing.JLabel();
        typeComboBox = new javax.swing.JComboBox<>();
        idTextField = new javax.swing.JTextField();
        bedsLabel = new javax.swing.JLabel();
        bedsTextField = new javax.swing.JTextField();
        insertButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Insert Room");

        roomPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Room Informations"));

        idLabel.setText("Room ID : ");

        branchLabel.setText("Branch : ");

        branchComboBox.setModel(this.branchModel);
        branchComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                branchComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setText("Floor number : ");

        floorComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT" }));
        floorComboBox.setEnabled(false);
        floorComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                floorComboBoxActionPerformed(evt);
            }
        });

        typeLabel.setText("Type : ");

        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT" }));
        typeComboBox.setEnabled(false);
        typeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeComboBoxActionPerformed(evt);
            }
        });

        idTextField.setEditable(false);

        bedsLabel.setText("Beds number : ");

        javax.swing.GroupLayout roomPanelLayout = new javax.swing.GroupLayout(roomPanel);
        roomPanel.setLayout(roomPanelLayout);
        roomPanelLayout.setHorizontalGroup(
            roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(roomPanelLayout.createSequentialGroup()
                        .addComponent(idLabel)
                        .addGap(18, 18, 18)
                        .addComponent(idTextField))
                    .addGroup(roomPanelLayout.createSequentialGroup()
                        .addGroup(roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(roomPanelLayout.createSequentialGroup()
                                .addComponent(typeLabel)
                                .addGap(35, 35, 35)
                                .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(roomPanelLayout.createSequentialGroup()
                                .addComponent(branchLabel)
                                .addGap(26, 26, 26)
                                .addComponent(branchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(roomPanelLayout.createSequentialGroup()
                                .addComponent(bedsLabel)
                                .addGap(18, 18, 18)
                                .addComponent(bedsTextField))
                            .addGroup(roomPanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(floorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        roomPanelLayout.setVerticalGroup(
            roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(branchLabel)
                    .addComponent(branchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(floorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeLabel)
                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bedsLabel)
                    .addComponent(bedsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(roomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idLabel)
                    .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        insertButton.setText("Insert");
        insertButton.setEnabled(false);
        insertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(insertButton)
                    .addComponent(roomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(roomPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(insertButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void insertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertButtonActionPerformed
        try {
            int beds=Integer.parseInt(this.bedsTextField.getText());
            this.con=DriverManager.getConnection(Hotel.getUrl());
            PreparedStatement stat=this.con.prepareStatement("INSERT INTO room VALUES(?,?,?,?)");
            stat.setInt(1, Integer.parseInt(this.idTextField.getText()));
            stat.setInt(2, (int) this.floorComboBox.getSelectedItem());
            stat.setString(4, this.typeComboBox.getSelectedItem().toString());
            stat.setInt(3, beds);
            stat.executeUpdate();
            stat=this.con.prepareStatement("INSERT INTO own VALUES(?,?)");
            stat.setInt(1, (int) this.branchComboBox.getSelectedItem());
            stat.setInt(2,Integer.parseInt(this.idTextField.getText()));
            stat.executeUpdate();
            this.con.close();
            DefaultComboBoxModel model=new DefaultComboBoxModel();
            model.addElement("SELECT");
            for(int i=1;i<=beds;i++)
            {
                model.addElement(i);
            }
            Hotel.getCheckIn().getBedsNbComboBox().setModel(model);
            Hotel.setRooms(new Rooms());
            Hotel.getHome().getTabbebPane().remove(2);
            Hotel.getHome().getTabbebPane().add(Hotel.getRooms(),2);
            Hotel.getHome().getTabbebPane().setTitleAt(2, "ROOMS");
            Hotel.getHome().getTabbebPane().setSelectedIndex(2);
            this.setVisible(false);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this,"Insert a correct beds number","",JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(InsertRoom.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_insertButtonActionPerformed

    private void branchComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_branchComboBoxActionPerformed
        if(!this.branchComboBox.getSelectedItem().equals("SELECT"))
        {
            try {
                int id=Integer.parseInt(this.branchComboBox.getSelectedItem().toString());
                this.con=DriverManager.getConnection(Hotel.getUrl());
                Statement stat=con.createStatement();
                ResultSet set=stat.executeQuery("SELECT Floors_nb FROM branch WHERE branch_id="+id);
                floorModel=new DefaultComboBoxModel();
                floorModel.addElement("SELECT");
                if(set.next()){
                    for(int i=1;i<=set.getInt(1);i++)
                        floorModel.addElement(i);
                }
                this.floorComboBox.setModel(floorModel);
                this.floorComboBox.setEnabled(true);
                this.con.close();
            } catch (SQLException ex) {
                Logger.getLogger(InsertRoom.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            this.floorComboBox.setSelectedIndex(0);
            this.floorComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_branchComboBoxActionPerformed

    private void typeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeComboBoxActionPerformed
        if(!this.typeComboBox.getSelectedItem().equals("SELECT"))
        {
            this.insertButton.setEnabled(true);
        }
        else
        {
            this.insertButton.setEnabled(false);
        }
    }//GEN-LAST:event_typeComboBoxActionPerformed

    private void floorComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_floorComboBoxActionPerformed
        if(!this.floorComboBox.getSelectedItem().equals("SELECT"))
        {
            try {
                int id=Integer.parseInt(this.branchComboBox.getSelectedItem().toString());
                int floor=Integer.parseInt(this.floorComboBox.getSelectedItem().toString());
                this.con=DriverManager.getConnection(Hotel.getUrl());
                Statement stat=con.createStatement();
                ResultSet set;
                this.typeComboBox.setEnabled(true);
                set=stat.executeQuery("SELECT count(*) FROM own,room WHERE own.branch_id="+id+"AND own.room_id=room.room_id "
                        + "AND room.floor_nb="+floor);
                set.next();
                int roomId=id*1000+floor*100+set.getInt(1)+1;
                this.idTextField.setText(""+roomId);
                this.con.close();
            } catch (SQLException ex) {
                Logger.getLogger(InsertRoom.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            this.typeComboBox.setSelectedIndex(0);
            this.typeComboBox.setEnabled(false);
        }
    }//GEN-LAST:event_floorComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel bedsLabel;
    private javax.swing.JTextField bedsTextField;
    private javax.swing.JComboBox<String> branchComboBox;
    private javax.swing.JLabel branchLabel;
    private javax.swing.JComboBox<String> floorComboBox;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JButton insertButton;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel roomPanel;
    private javax.swing.JComboBox<String> typeComboBox;
    private javax.swing.JLabel typeLabel;
    // End of variables declaration//GEN-END:variables
}

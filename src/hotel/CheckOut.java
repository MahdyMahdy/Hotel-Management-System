/*
 * To change this license header, choose License Headers in Project Properties.
 * and open the template in the editor.
 */
package hotel;

import classes.Customer;
import classes.Own;
import classes.Room;
import classes.MakeReservation;
import classes.Reservation;
import classes.Branch;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author mahdi
 */
public class CheckOut extends javax.swing.JPanel {

    /**
     * Creates new form CheckOut
     */
    private Connection con=null;
    private BufferedImage backgroundImage;
    @Override
    public void paintComponent(Graphics grphcs) {
        super.paintComponent(grphcs); 
        grphcs.drawImage(backgroundImage, 0,0,this.getWidth(),this.getHeight(), this);
    }
    
    public CheckOut() {
        try {
            this.backgroundImage=ImageIO.read(new File("src\\images\\home.jpg"));
        } catch (IOException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            this.con=DriverManager.getConnection(Hotel.getUrl());
            con.close();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this,"Missing SQLServerDriver!","",JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(CheckOut.class.getName()).log(Level.SEVERE, null, ex);
        }
        initComponents();
    }
    

    public JButton getCheckIdButton() {
        return checkIdButton;
    }

    public JTextField getReservationIdTextField() {
        return reservationIdTextField;
    }

    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reservationInformationsPanel = new javax.swing.JPanel();
        reservationIdLabel = new javax.swing.JLabel();
        reservationIdTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        reservationInformationTextArea = new javax.swing.JTextArea();
        checkIdButton = new javax.swing.JButton();
        checkOutButton = new javax.swing.JButton();
        changeIdButton = new javax.swing.JButton();

        reservationInformationsPanel.setBackground(new Color(255,255,255,100));
        reservationInformationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Reservation Informations"));

        reservationIdLabel.setText("Reservation ID : ");

        reservationInformationTextArea.setEditable(false);
        reservationInformationTextArea.setColumns(20);
        reservationInformationTextArea.setRows(5);
        jScrollPane1.setViewportView(reservationInformationTextArea);

        checkIdButton.setBackground(new Color(255,255,255));
        checkIdButton.setText("Check ID");
        checkIdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkIdButtonActionPerformed(evt);
            }
        });

        checkOutButton.setBackground(new Color(255,255,255));
        checkOutButton.setText("Check_Out");
        checkOutButton.setEnabled(false);
        checkOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutButtonActionPerformed(evt);
            }
        });

        changeIdButton.setBackground(new Color(255,255,255));
        changeIdButton.setText("Change ID");
        changeIdButton.setEnabled(false);
        changeIdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeIdButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reservationInformationsPanelLayout = new javax.swing.GroupLayout(reservationInformationsPanel);
        reservationInformationsPanel.setLayout(reservationInformationsPanelLayout);
        reservationInformationsPanelLayout.setHorizontalGroup(
            reservationInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationInformationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservationInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(reservationInformationsPanelLayout.createSequentialGroup()
                        .addComponent(reservationIdLabel)
                        .addGap(18, 18, 18)
                        .addComponent(reservationIdTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 156, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(checkIdButton)
                        .addGap(18, 18, 18)
                        .addComponent(changeIdButton)
                        .addGap(12, 12, 12))
                    .addGroup(reservationInformationsPanelLayout.createSequentialGroup()
                        .addComponent(checkOutButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        reservationInformationsPanelLayout.setVerticalGroup(
            reservationInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reservationInformationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reservationInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reservationIdLabel)
                    .addComponent(reservationIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkIdButton)
                    .addComponent(changeIdButton))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkOutButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reservationInformationsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reservationInformationsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkIdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkIdButtonActionPerformed
        String idString=this.reservationIdTextField.getText();
        if(!idString.equals(""))
        {
            try{
                int id=Integer.parseInt(idString);
                try {
                this.con=DriverManager.getConnection(Hotel.getUrl());
                Statement stat=this.con.createStatement();
                ResultSet set=stat.executeQuery("SELECT * FROM reservation WHERE reserv_id="+id);
                Reservation reserv;
                if(set.next())
                {
                    String out;
                    try{
                        out=set.getDate(3).toString();
                        this.checkOutButton.setEnabled(false);
                    }
                    catch (NullPointerException e)
                    {
                        out="-";
                        this.checkOutButton.setEnabled(true);
                    }
                    reserv=new Reservation(id,set.getDate(2).toString(),out);
                    this.checkIdButton.setEnabled(false);
                    this.changeIdButton.setEnabled(true);
                    this.reservationIdTextField.setEnabled(false);
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "Id does not exist! ","",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                set=stat.executeQuery("SELECT * FROM make_reservation WHERE reserv_id="+id);
                MakeReservation makeReserv;
                if(set.next())
                {
                    makeReserv=new MakeReservation(set.getInt(1),set.getInt(2),set.getInt(3),set.getInt(4));
                }
                else
                {
                    return;
                }
                set=stat.executeQuery("SELECT * FROM room WHERE room_id="+makeReserv.getRoom_id());
                Room room;
                if(set.next())
                {
                    room=new Room(set.getInt(1),set.getInt(2),set.getInt(3),set.getString(4));
                }
                else
                {
                    return;
                }
                set=stat.executeQuery("SELECT * FROM customer WHERE cust_id="+makeReserv.getCust_id());
                Customer cust;
                if(set.next())
                {
                    cust=new Customer(set.getInt(1),set.getString(2),set.getString(3),set.getString(4),set.getString(5));
                }
                else
                {
                    return;
                }
                set=stat.executeQuery("SELECT * FROM own WHERE room_id="+makeReserv.getRoom_id());
                Own own;
                if(set.next())
                {
                    own=new Own(set.getInt(1),set.getInt(2));
                }
                else
                {
                    return;
                }
                set=stat.executeQuery("SELECT * FROM branch WHERE branch_id="+own.getBranch_id());
                Branch branch;
                if(set.next())
                {
                    branch=new Branch(set.getInt(1),set.getInt(2),set.getString(3));
                }
                else
                {
                    return;
                }
                this.reservationInformationTextArea
                            .setText("Reservation id : "+reserv.getId()
                                    +"\nCheck_in Date : "+reserv.getCheck_in()
                                    +"\nCheck_out Date : "+reserv.getCheck_out()
                                    +"\nCustomer ID : "+cust.getId()
                                    +"\nCustomer Full Name : "+cust.getName()+" "+cust.getLastName()
                                    +"\nCustomer Email : "+cust.getEmail()
                                    +"\nCustomer Phone Number : "+cust.getPhoneNumber()
                                    +"\nRoom ID : "+room.getRoom_id()
                                    +"\nRoom Type : "+room.getType()
                                    +"\nRoom beds number : "+room.getBeds_nb()
                                    +"\nRoom Floor NB : "+room.getFloor_nb()
                                    +"\nBranch ID : "+branch.getBranch_id()
                                    +"\nBranch Location : "+branch.getLocation());
                con.close();
                } catch (SQLException ex) {
                    Logger.getLogger(CheckOut.class.getName()).log(Level.SEVERE, null, ex);
                    this.checkOutButton.setEnabled(false);
                }
            
            }
            catch (NumberFormatException ex)
            {
                JOptionPane.showMessageDialog(this, "Please enter correct id ","",JOptionPane.ERROR_MESSAGE);
                this.checkOutButton.setEnabled(false);
            }
        }
    }//GEN-LAST:event_checkIdButtonActionPerformed

    private void changeIdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeIdButtonActionPerformed
        this.reservationIdTextField.setEnabled(true);
        this.checkOutButton.setEnabled(false);
        this.changeIdButton.setEnabled(false);
        this.checkIdButton.setEnabled(true);
        this.reservationInformationTextArea.setText("");
        this.reservationIdTextField.setText("");
    }//GEN-LAST:event_changeIdButtonActionPerformed

    private void checkOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutButtonActionPerformed
        try {
            this.con=DriverManager.getConnection(Hotel.getUrl());
            Statement stat=this.con.createStatement();
            stat.execute("UPDATE reservation "
                + "SET check_out=GETDATE() WHERE reserv_id="+this.reservationIdTextField.getText());
            ResultSet set=stat.executeQuery("SELECT * FROM reservation WHERE reserv_id="+this.reservationIdTextField.getText());
            Reservation reservation = null;
            if(set.next())
            {
                reservation = new Reservation(set.getInt(1),set.getDate(2).toString(),set.getDate(3).toString());
            }
            String txt=this.reservationInformationTextArea.getText();
            String[] arrayTxt=txt.split("\n");
            arrayTxt[2]="Check_out Date : "+reservation.getCheck_out();
            txt="";
            for(int i=0;i<arrayTxt.length;i++)
            {
                txt+=arrayTxt[i]+"\n";
            }
            this.reservationInformationTextArea.setText(txt);
            this.checkOutButton.setEnabled(false);
            Bill bill=new Bill(Hotel.getHome(),true,reservation.getId());
            bill.setLocationRelativeTo(Hotel.getHome());
            bill.setSize(450, 350);
            bill.setVisible(true);
            Hotel.getHome().getTabbebPane().remove(Hotel.getRooms());
            Hotel.setRooms(new Rooms());
            Hotel.getHome().getTabbebPane().add(Hotel.getRooms(), "ROOMS", 2);
            Hotel.setReservations(new Reservations());
            Hotel.getHome().getTabbebPane().remove(3);
            Hotel.getHome().getTabbebPane().add(Hotel.getReservations(),"RESERVATIONS", 3);
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(CheckOut.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_checkOutButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changeIdButton;
    private javax.swing.JButton checkIdButton;
    private javax.swing.JButton checkOutButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel reservationIdLabel;
    private javax.swing.JTextField reservationIdTextField;
    private javax.swing.JTextArea reservationInformationTextArea;
    private javax.swing.JPanel reservationInformationsPanel;
    // End of variables declaration//GEN-END:variables
}

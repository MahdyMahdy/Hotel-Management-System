/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hotel;

import classes.Customer;
import classes.Room;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mahdi
 */
public class CheckIn extends javax.swing.JPanel {

    /**
     * Creates new form CheckIn
     */
    private int targetRoomId;
    private Connection con=null;
    private BufferedImage backgroundImage;

    @Override
    public void paintComponent(Graphics grphcs) {
        super.paintComponent(grphcs); 
        grphcs.drawImage(backgroundImage, 0,0,this.getWidth(),this.getHeight(), this);
    }

    public JTextArea getRoomTypeNotesTextArea() {
        return roomTypeNotesTextArea;
    }

    public void setTargetRoomId(int targetRoomId) {
        this.targetRoomId = targetRoomId;
    }

    public int getTargetRoomId() {
        return targetRoomId;
    }
    public DefaultComboBoxModel branchModel=new DefaultComboBoxModel();
    private DefaultComboBoxModel roomTypeModel=new DefaultComboBoxModel();
    private DefaultComboBoxModel bedsNbModel=new DefaultComboBoxModel();
    public CheckIn() {
        try {
            this.backgroundImage=ImageIO.read(new File("src\\images\\home.jpg"));
        } catch (IOException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            this.con=DriverManager.getConnection(Hotel.getUrl());
            Statement stat=con.createStatement();
            ResultSet set=stat.executeQuery("SELECT branch_ID FROM branch ");
            branchModel.addElement("SELECT");
            while(set.next()){
                branchModel.addElement(set.getInt(1));
            }
            set=stat.executeQuery("SELECT type FROM price WHERE type!='Entry' GROUP BY type");
            roomTypeModel.addElement("SELECT");
            while(set.next()){
                roomTypeModel.addElement(set.getString(1));
            }
            set=stat.executeQuery("SELECT MAX(Beds_nb) FROM room");
            if(set.next())
            {
                int max=set.getInt(1);
                this.bedsNbModel.addElement("SELECT");
                for(int i=1;i<=max;i++)
                {
                    this.bedsNbModel.addElement(i);
                }
            }
            con.close();
        } catch (ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this,"Missing SQLServerDriver!","",JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this,"Connection Error!","",JOptionPane.ERROR_MESSAGE);
        }
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        branchAndRoomPanel = new javax.swing.JPanel();
        branchLabel = new javax.swing.JLabel();
        branchComboBox = new javax.swing.JComboBox<>();
        roomTypeLabel = new javax.swing.JLabel();
        roomTypeComboBox = new javax.swing.JComboBox<>();
        bedsNbLabel = new javax.swing.JLabel();
        bedsNbComboBox = new javax.swing.JComboBox<>();
        customerInformationsPanel = new javax.swing.JPanel();
        newCustomerCheckBox = new javax.swing.JCheckBox();
        CustomerIdLabel = new javax.swing.JLabel();
        customerIdTextField = new javax.swing.JTextField();
        customerNameLabel = new javax.swing.JLabel();
        customerNameTextField = new javax.swing.JTextField();
        customerLastNameLabel = new javax.swing.JLabel();
        customerLastNameTextField = new javax.swing.JTextField();
        customerPhoneNumberLabel = new javax.swing.JLabel();
        customerPhoneNumberTextField = new javax.swing.JTextField();
        customerEmailLabel = new javax.swing.JLabel();
        customerEmailTextField = new javax.swing.JTextField();
        checkIdButton = new javax.swing.JButton();
        changeIdButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        reservationInformationsTextArea = new javax.swing.JTextArea();
        chechInButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        roomTypeNotesTextArea = new javax.swing.JTextArea();

        branchAndRoomPanel.setBackground(new Color(255,255,255,100));
        branchAndRoomPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Branch and Room"));

        branchLabel.setText("Branch : ");

        branchComboBox.setModel(branchModel);
        branchComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                res(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                res(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        branchComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rep(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rep(evt);
            }
        });
        branchComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                branchComboBoxActionPerformed(evt);
            }
        });

        roomTypeLabel.setText("Room Type : ");

        roomTypeComboBox.setModel(roomTypeModel);
        roomTypeComboBox.setEnabled(false);
        roomTypeComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                res(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        roomTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomTypeComboBoxActionPerformed(evt);
            }
        });

        bedsNbLabel.setText("Number of Beds : ");

        bedsNbComboBox.setModel(this.bedsNbModel);
        bedsNbComboBox.setEnabled(false);
        bedsNbComboBox.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                res(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        bedsNbComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bedsNbComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout branchAndRoomPanelLayout = new javax.swing.GroupLayout(branchAndRoomPanel);
        branchAndRoomPanel.setLayout(branchAndRoomPanelLayout);
        branchAndRoomPanelLayout.setHorizontalGroup(
            branchAndRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(branchAndRoomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(branchAndRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(branchAndRoomPanelLayout.createSequentialGroup()
                        .addComponent(roomTypeLabel)
                        .addGap(18, 18, 18)
                        .addComponent(roomTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(branchAndRoomPanelLayout.createSequentialGroup()
                        .addComponent(branchLabel)
                        .addGap(18, 18, 18)
                        .addComponent(branchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(branchAndRoomPanelLayout.createSequentialGroup()
                        .addComponent(bedsNbLabel)
                        .addGap(18, 18, 18)
                        .addComponent(bedsNbComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        branchAndRoomPanelLayout.setVerticalGroup(
            branchAndRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(branchAndRoomPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(branchAndRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(branchLabel)
                    .addComponent(branchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(branchAndRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomTypeLabel)
                    .addComponent(roomTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(branchAndRoomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bedsNbLabel)
                    .addComponent(bedsNbComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        customerInformationsPanel.setBackground(new Color(255,255,255,100));
        customerInformationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Customer Infotmations"));

        newCustomerCheckBox.setBackground(new Color(0,0,0,0));
        newCustomerCheckBox.setText("New Customer?");
        newCustomerCheckBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ref(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ref(evt);
            }
        });
        newCustomerCheckBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rep(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                rep(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                rep(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                rep(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                rep(evt);
            }
        });
        newCustomerCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newCustomerCheckBoxActionPerformed(evt);
            }
        });

        CustomerIdLabel.setText("Customer ID : ");

        customerNameLabel.setText("Customer Name : ");

        customerNameTextField.setEnabled(false);

        customerLastNameLabel.setText("Customer Last Name : ");

        customerLastNameTextField.setEnabled(false);

        customerPhoneNumberLabel.setText("Customer Phone Number : ");

        customerPhoneNumberTextField.setEnabled(false);

        customerEmailLabel.setText("Customer Email : ");

        customerEmailTextField.setEnabled(false);

        checkIdButton.setBackground(new java.awt.Color(255, 255, 255));
        checkIdButton.setText("Check ID");
        checkIdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkIdButtonActionPerformed(evt);
            }
        });

        changeIdButton.setBackground(new java.awt.Color(255, 255, 255));
        changeIdButton.setText("Change ID");
        changeIdButton.setEnabled(false);
        changeIdButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeIdButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout customerInformationsPanelLayout = new javax.swing.GroupLayout(customerInformationsPanel);
        customerInformationsPanel.setLayout(customerInformationsPanelLayout);
        customerInformationsPanelLayout.setHorizontalGroup(
            customerInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerInformationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customerInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customerInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(customerEmailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(customerPhoneNumberLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(customerLastNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(customerNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(CustomerIdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(newCustomerCheckBox))
                .addGap(18, 18, 18)
                .addGroup(customerInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerIdTextField)
                    .addComponent(customerNameTextField)
                    .addComponent(customerLastNameTextField)
                    .addComponent(customerPhoneNumberTextField)
                    .addComponent(customerEmailTextField)
                    .addGroup(customerInformationsPanelLayout.createSequentialGroup()
                        .addComponent(checkIdButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changeIdButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        customerInformationsPanelLayout.setVerticalGroup(
            customerInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerInformationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(customerInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newCustomerCheckBox)
                    .addComponent(checkIdButton)
                    .addComponent(changeIdButton))
                .addGap(18, 18, 18)
                .addGroup(customerInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CustomerIdLabel)
                    .addComponent(customerIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(customerInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerNameLabel)
                    .addComponent(customerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(customerInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerLastNameLabel)
                    .addComponent(customerLastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(customerInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerPhoneNumberLabel)
                    .addComponent(customerPhoneNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(customerInformationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerEmailLabel)
                    .addComponent(customerEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new Color(255,255,255,100));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Reservation Informations"));

        reservationInformationsTextArea.setEditable(false);
        reservationInformationsTextArea.setColumns(20);
        reservationInformationsTextArea.setRows(5);
        jScrollPane2.setViewportView(reservationInformationsTextArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        chechInButton.setBackground(new java.awt.Color(255, 255, 255));
        chechInButton.setText("Check In");
        chechInButton.setEnabled(false);
        chechInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chechInButtonActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new Color(255,255,255,100));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Notes : "));

        roomTypeNotesTextArea.setEditable(false);
        roomTypeNotesTextArea.setColumns(20);
        roomTypeNotesTextArea.setFont(new java.awt.Font("MS PGothic", 1, 14)); // NOI18N
        roomTypeNotesTextArea.setRows(3);
        roomTypeNotesTextArea.setTabSize(10);
        jScrollPane1.setViewportView(roomTypeNotesTextArea);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(branchAndRoomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(customerInformationsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chechInButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(branchAndRoomPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(customerInformationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chechInButton)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void branchComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_branchComboBoxActionPerformed
        if(!this.branchComboBox.getSelectedItem().toString().equals("SELECT"))
        {
            this.roomTypeComboBox.setEnabled(true);
        }
        else
        {
            this.roomTypeNotesTextArea.setText("");
            this.roomTypeComboBox.setEnabled(false);
        }
        this.roomTypeComboBox.setSelectedIndex(0);
        this.revalidate();
        this.repaint();
    }//GEN-LAST:event_branchComboBoxActionPerformed

    private void roomTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomTypeComboBoxActionPerformed
        if(!this.roomTypeComboBox.getSelectedItem().toString().equals("SELECT"))
        {
            this.bedsNbComboBox.setEnabled(true);
            this.bedsNbComboBox.setSelectedIndex(0);
        }
        else
        {
            this.roomTypeNotesTextArea.setText("");
            this.chechInButton.setEnabled(false);
            this.bedsNbComboBox.setEnabled(false);
            this.bedsNbComboBox.setSelectedIndex(0);
        }
    }//GEN-LAST:event_roomTypeComboBoxActionPerformed

    private void newCustomerCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newCustomerCheckBoxActionPerformed
        this.customerIdTextField.setText("");
        this.customerNameTextField.setText("");
        this.customerLastNameTextField.setText("");
        this.customerPhoneNumberTextField.setText("");
        this.customerEmailTextField.setText("");
        if(this.newCustomerCheckBox.isSelected())
        {
            this.checkIdButton.setEnabled(false);
            this.customerIdTextField.setEnabled(false);
            this.customerNameTextField.setEnabled(true);
            this.customerLastNameTextField.setEnabled(true);
            this.customerPhoneNumberTextField.setEnabled(true);
            this.customerEmailTextField.setEnabled(true);
            this.changeIdButton.setEnabled(false);
        }
        else
        {
            this.checkIdButton.setEnabled(true);
            this.customerIdTextField.setEnabled(true);
            this.customerNameTextField.setEnabled(false);
            this.customerLastNameTextField.setEnabled(false);
            this.customerPhoneNumberTextField.setEnabled(false);
            this.customerEmailTextField.setEnabled(false);
        }
        this.revalidate();
        this.repaint();
    }//GEN-LAST:event_newCustomerCheckBoxActionPerformed

    private void checkIdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkIdButtonActionPerformed
        String idString=this.customerIdTextField.getText();
        if(!idString.equals(""))
        {
            try
            {
                int id=Integer.parseInt(idString);
                this.con=DriverManager.getConnection(Hotel.getUrl());
                Statement stat = con.createStatement();
                ResultSet set=stat.executeQuery("SELECT * FROM customer WHERE cust_id="+id);
                if(set.next())
                {
                    this.customerNameTextField.setText(set.getString(2));
                    this.customerLastNameTextField.setText(set.getString(3));
                    this.customerPhoneNumberTextField.setText(set.getString(4));
                    this.customerEmailTextField.setText(set.getString(5));
                    this.customerIdTextField.setEnabled(false);
                    this.checkIdButton.setEnabled(false);
                    this.changeIdButton.setEnabled(true);
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "There is no customer with this id!","",JOptionPane.ERROR_MESSAGE);
                }
                con.close();
            }
            catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter correct id ","",JOptionPane.ERROR_MESSAGE);
            } catch (SQLException ex) {
                Logger.getLogger(CheckIn.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_checkIdButtonActionPerformed

    private void chechInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chechInButtonActionPerformed
        int id = 0;
        if(this.newCustomerCheckBox.isSelected())
        {
            String name=this.customerNameTextField.getText();
            if(name.equals(""))
            {
                JOptionPane.showMessageDialog(this, "Please enter Name of the customer","",JOptionPane.ERROR_MESSAGE);
                return;
            }
            String lastName=this.customerLastNameTextField.getText();
            if(lastName.equals(""))
            {
                JOptionPane.showMessageDialog(this, "Please enter Last Name of the customer","",JOptionPane.ERROR_MESSAGE);
                return;
            }
            String email=this.customerEmailTextField.getText();
            if(email.equals(""))
            {
                JOptionPane.showMessageDialog(this, "Please enter email of the customer","",JOptionPane.ERROR_MESSAGE);
                return;
            }
            if(!email.contains("@"))
            {
                JOptionPane.showMessageDialog(this, "Please enter a valid email of the customer","",JOptionPane.ERROR_MESSAGE);
                return;
            }
            String phoneNumber=this.customerPhoneNumberTextField.getText();
            try
            {
                Integer.parseInt(phoneNumber);
            }
            catch (NumberFormatException e)
            {
                JOptionPane.showMessageDialog(this, "Please enter a valid phone number of the customer","",JOptionPane.ERROR_MESSAGE);
                return;
            }    
            Statement stat;
            try {
                this.con=DriverManager.getConnection(Hotel.getUrl());
                stat = con.createStatement();
                ResultSet set=stat.executeQuery("SELECT COUNT(*) FROM customer");
                set.next();
                id=set.getInt(1);
                PreparedStatement prepStat=con.prepareStatement("INSERT INTO customer VALUES(?,?,?,?,?)");
                prepStat.setInt(1,id);
                prepStat.setString(2,name);
                prepStat.setString(3,lastName);
                prepStat.setString(4,phoneNumber);
                prepStat.setString(5,email);
                prepStat.executeUpdate();
                DefaultTableModel model=(DefaultTableModel) Hotel.getCustomer().getCustomerTable().getModel();
                model.addRow(new Object[]{id,name,lastName,phoneNumber,email});
                con.close();
            } catch (SQLException ex) {
                Logger.getLogger(CheckIn.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else
        {
            try
            {
                id=Integer.parseInt(this.customerIdTextField.getText());
            }
            catch (Exception e)
            {
                JOptionPane.showMessageDialog(this, "Please enter customer Info","",JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        Statement stat;
        try {
                int room_id=this.targetRoomId;
                this.con=DriverManager.getConnection(Hotel.getUrl());
                stat=con.createStatement();
                ResultSet set=stat.executeQuery("SELECT COUNT(*) FROM reservation");
                set.next();
                int reservID=set.getInt(1)+1;
                PreparedStatement prepStat=con.prepareStatement("INSERT INTO reservation VALUES(?,GETDATE(),null)");
                prepStat.setInt(1, reservID);
                prepStat.executeUpdate();
                prepStat=con.prepareStatement("INSERT INTO make_reservation VALUES(?,?,?,?)");
                prepStat.setInt(1, id);
                prepStat.setInt(2, room_id);
                prepStat.setInt(3, reservID);
                prepStat.setInt(4, Hotel.getEmp_id());
                prepStat.executeUpdate();
                DefaultTableModel model=(DefaultTableModel) Hotel.getReservations().getReservationsTable().getModel();
                DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                LocalDateTime myDateObj = LocalDateTime.now();
                String formattedDate = myDateObj.format(myFormatObj);
                model.addRow(new Object[]{reservID,formattedDate,null,id,room_id,Hotel.getEmp_id()});
                set=stat.executeQuery("SELECT * FROM customer WHERE cust_id="+id);
                set.next();
                Customer cust=new Customer(id,set.getString(2),set.getString(3),set.getString(4),set.getString(5));
                set=stat.executeQuery("SELECT * FROM room WHERE room_id="+room_id);
                set.next();
                Room room=new Room(room_id,set.getInt(2),set.getInt(3),set.getString(4));
                Hotel.getHome().getTabbebPane().remove(Hotel.getRooms());
                Hotel.setRooms(new Rooms());
                Hotel.getHome().getTabbebPane().add(Hotel.getRooms(), "ROOMS", 2);
                String branch = this.branchComboBox.getSelectedItem().toString();
                this.branchComboBox.setSelectedIndex(0);
                this.roomTypeComboBox.setSelectedIndex(0);
                this.bedsNbComboBox.setSelectedIndex(0);
                this.roomTypeNotesTextArea.setText("");
                this.chechInButton.setEnabled(false);
                this.reservationInformationsTextArea
                        .setText("Reservation ID : "+reservID
                                +"\nCustomer ID : "+cust.getId()
                                +"\nCustomer Full Name : "+cust.getName()+" "+cust.getLastName()
                                +"\nBranch ID : "+branch
                                +"\nRoom ID : "+room_id
                                +"\nFloor NB : "+room.getFloor_nb()
                                +"\nType : "+room.getType()
                                +"\nBeds number :"+room.getBeds_nb()
                                +"\nDate : "+formattedDate);
                this.customerPhoneNumberTextField.setText("");
                this.customerEmailTextField.setText("");
                this.customerLastNameTextField.setText("");
                this.customerNameTextField.setText("");
                this.newCustomerCheckBox.setSelected(false);
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(CheckIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_chechInButtonActionPerformed

    public JComboBox<String> getBedsNbComboBox() {
        return bedsNbComboBox;
    }

    public JComboBox<String> getBranchComboBox() {
        return branchComboBox;
    }

    public JComboBox<String> getRoomTypeComboBox() {
        return roomTypeComboBox;
    }

    private void bedsNbComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bedsNbComboBoxActionPerformed
        if(!this.bedsNbComboBox.getSelectedItem().toString().equals("SELECT"))
        {
            Statement stat;
            try {
                this.con=DriverManager.getConnection(Hotel.getUrl());
                stat=con.createStatement();
                ResultSet set=stat.executeQuery(
                        "SELECT room.room_id FROM room,own WHERE room.room_id=own.room_id and room.type='"+this.roomTypeComboBox.getSelectedItem()+"' "
                                + "and own.branch_id="+this.branchComboBox.getSelectedItem()
                                +" and room.beds_nb="+this.bedsNbComboBox.getSelectedItem()
                                +" and room.room_id not in (Select room.room_id from room,reservation,make_reservation "
                                        +"where room.room_id=make_reservation.room_id "
                                        + "and make_reservation.reserv_id=reservation.reserv_id "
                                        + "and reservation.check_out is null)");
                if(set.next())
                {
                    this.targetRoomId=set.getInt(1);
                    this.roomTypeNotesTextArea.setText("Target Room : "+targetRoomId
                            +"\n*****************************\nAvailble Rooms : \n");
                    while(set.next())
                    {
                        this.roomTypeNotesTextArea.setText(this.roomTypeNotesTextArea.getText()
                                +"Room "+set.getInt(1)+"\n");
                    }
                    this.chechInButton.setEnabled(true);
                }
                else
                {
                    this.roomTypeNotesTextArea.setText("No availble Rooms");
                    this.chechInButton.setEnabled(false);
                }
            con.close();
            } catch (SQLException ex) {
                Logger.getLogger(CheckIn.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this,"Connection Error!","",JOptionPane.ERROR_MESSAGE);
            }
        }
        else
        {
            this.roomTypeNotesTextArea.setText("");
            this.chechInButton.setEnabled(false);
            this.reservationInformationsTextArea.setText("");
        }
    }//GEN-LAST:event_bedsNbComboBoxActionPerformed

    private void rep(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rep
        this.revalidate();
        this.repaint();        // TODO add your handling code here:
    }//GEN-LAST:event_rep

    private void res(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_res
        this.revalidate();
        this.repaint();        // TODO add your handling code here:
    }//GEN-LAST:event_res

    private void ref(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ref
        this.revalidate();
        this.repaint();
    }//GEN-LAST:event_ref

    private void changeIdButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeIdButtonActionPerformed
        this.checkIdButton.setEnabled(true);
        this.changeIdButton.setEnabled(false);
        this.customerIdTextField.setEnabled(true);
        this.customerIdTextField.setText("");
        this.customerNameTextField.setText("");
        this.customerLastNameTextField.setText("");
        this.customerPhoneNumberTextField.setText("");
        this.customerEmailTextField.setText("");
    }//GEN-LAST:event_changeIdButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CustomerIdLabel;
    private javax.swing.JComboBox<String> bedsNbComboBox;
    private javax.swing.JLabel bedsNbLabel;
    private javax.swing.JPanel branchAndRoomPanel;
    private javax.swing.JComboBox<String> branchComboBox;
    private javax.swing.JLabel branchLabel;
    private javax.swing.JButton changeIdButton;
    private javax.swing.JButton chechInButton;
    private javax.swing.JButton checkIdButton;
    private javax.swing.JLabel customerEmailLabel;
    private javax.swing.JTextField customerEmailTextField;
    private javax.swing.JTextField customerIdTextField;
    private javax.swing.JPanel customerInformationsPanel;
    private javax.swing.JLabel customerLastNameLabel;
    private javax.swing.JTextField customerLastNameTextField;
    private javax.swing.JLabel customerNameLabel;
    private javax.swing.JTextField customerNameTextField;
    private javax.swing.JLabel customerPhoneNumberLabel;
    private javax.swing.JTextField customerPhoneNumberTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JCheckBox newCustomerCheckBox;
    private javax.swing.JTextArea reservationInformationsTextArea;
    private javax.swing.JComboBox<String> roomTypeComboBox;
    private javax.swing.JLabel roomTypeLabel;
    private javax.swing.JTextArea roomTypeNotesTextArea;
    // End of variables declaration//GEN-END:variables
}
